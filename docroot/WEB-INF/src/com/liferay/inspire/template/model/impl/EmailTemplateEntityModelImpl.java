/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.inspire.template.model.impl;

import com.liferay.inspire.template.model.EmailTemplateEntity;
import com.liferay.inspire.template.model.EmailTemplateEntityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmailTemplateEntity service. Represents a row in the &quot;EmailTemplates_EmailTemplateEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.inspire.template.model.EmailTemplateEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailTemplateEntityImpl}.
 * </p>
 *
 * @author Ahmad Taha
 * @see EmailTemplateEntityImpl
 * @see com.liferay.inspire.template.model.EmailTemplateEntity
 * @see com.liferay.inspire.template.model.EmailTemplateEntityModel
 * @generated
 */
public class EmailTemplateEntityModelImpl extends BaseModelImpl<EmailTemplateEntity>
	implements EmailTemplateEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email template entity model instance should use the {@link com.liferay.inspire.template.model.EmailTemplateEntity} interface instead.
	 */
	public static final String TABLE_NAME = "EmailTemplates_EmailTemplateEntity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "templateId", Types.BIGINT },
			{ "templateSubject", Types.VARCHAR },
			{ "templateBody", Types.VARCHAR },
			{ "templateSender", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table EmailTemplates_EmailTemplateEntity (templateId LONG not null primary key,templateSubject VARCHAR(75) null,templateBody VARCHAR(75) null,templateSender VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EmailTemplates_EmailTemplateEntity";
	public static final String ORDER_BY_JPQL = " ORDER BY emailTemplateEntity.templateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EmailTemplates_EmailTemplateEntity.templateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.inspire.template.model.EmailTemplateEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.inspire.template.model.EmailTemplateEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.inspire.template.model.EmailTemplateEntity"));

	public EmailTemplateEntityModelImpl() {
	}

	public long getPrimaryKey() {
		return _templateId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTemplateId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_templateId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return EmailTemplateEntity.class;
	}

	public String getModelClassName() {
		return EmailTemplateEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("templateId", getTemplateId());
		attributes.put("templateSubject", getTemplateSubject());
		attributes.put("templateBody", getTemplateBody());
		attributes.put("templateSender", getTemplateSender());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		String templateSubject = (String)attributes.get("templateSubject");

		if (templateSubject != null) {
			setTemplateSubject(templateSubject);
		}

		String templateBody = (String)attributes.get("templateBody");

		if (templateBody != null) {
			setTemplateBody(templateBody);
		}

		String templateSender = (String)attributes.get("templateSender");

		if (templateSender != null) {
			setTemplateSender(templateSender);
		}
	}

	public long getTemplateId() {
		return _templateId;
	}

	public void setTemplateId(long templateId) {
		_templateId = templateId;
	}

	public String getTemplateSubject() {
		if (_templateSubject == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateSubject;
		}
	}

	public void setTemplateSubject(String templateSubject) {
		_templateSubject = templateSubject;
	}

	public String getTemplateBody() {
		if (_templateBody == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateBody;
		}
	}

	public void setTemplateBody(String templateBody) {
		_templateBody = templateBody;
	}

	public String getTemplateSender() {
		if (_templateSender == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateSender;
		}
	}

	public void setTemplateSender(String templateSender) {
		_templateSender = templateSender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmailTemplateEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailTemplateEntity toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (EmailTemplateEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		EmailTemplateEntityImpl emailTemplateEntityImpl = new EmailTemplateEntityImpl();

		emailTemplateEntityImpl.setTemplateId(getTemplateId());
		emailTemplateEntityImpl.setTemplateSubject(getTemplateSubject());
		emailTemplateEntityImpl.setTemplateBody(getTemplateBody());
		emailTemplateEntityImpl.setTemplateSender(getTemplateSender());

		emailTemplateEntityImpl.resetOriginalValues();

		return emailTemplateEntityImpl;
	}

	public int compareTo(EmailTemplateEntity emailTemplateEntity) {
		int value = 0;

		if (getTemplateId() < emailTemplateEntity.getTemplateId()) {
			value = -1;
		}
		else if (getTemplateId() > emailTemplateEntity.getTemplateId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EmailTemplateEntity emailTemplateEntity = null;

		try {
			emailTemplateEntity = (EmailTemplateEntity)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = emailTemplateEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EmailTemplateEntity> toCacheModel() {
		EmailTemplateEntityCacheModel emailTemplateEntityCacheModel = new EmailTemplateEntityCacheModel();

		emailTemplateEntityCacheModel.templateId = getTemplateId();

		emailTemplateEntityCacheModel.templateSubject = getTemplateSubject();

		String templateSubject = emailTemplateEntityCacheModel.templateSubject;

		if ((templateSubject != null) && (templateSubject.length() == 0)) {
			emailTemplateEntityCacheModel.templateSubject = null;
		}

		emailTemplateEntityCacheModel.templateBody = getTemplateBody();

		String templateBody = emailTemplateEntityCacheModel.templateBody;

		if ((templateBody != null) && (templateBody.length() == 0)) {
			emailTemplateEntityCacheModel.templateBody = null;
		}

		emailTemplateEntityCacheModel.templateSender = getTemplateSender();

		String templateSender = emailTemplateEntityCacheModel.templateSender;

		if ((templateSender != null) && (templateSender.length() == 0)) {
			emailTemplateEntityCacheModel.templateSender = null;
		}

		return emailTemplateEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{templateId=");
		sb.append(getTemplateId());
		sb.append(", templateSubject=");
		sb.append(getTemplateSubject());
		sb.append(", templateBody=");
		sb.append(getTemplateBody());
		sb.append(", templateSender=");
		sb.append(getTemplateSender());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.inspire.template.model.EmailTemplateEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateSubject</column-name><column-value><![CDATA[");
		sb.append(getTemplateSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateBody</column-name><column-value><![CDATA[");
		sb.append(getTemplateBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateSender</column-name><column-value><![CDATA[");
		sb.append(getTemplateSender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmailTemplateEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			EmailTemplateEntity.class
		};
	private long _templateId;
	private String _templateSubject;
	private String _templateBody;
	private String _templateSender;
	private EmailTemplateEntity _escapedModelProxy;
}