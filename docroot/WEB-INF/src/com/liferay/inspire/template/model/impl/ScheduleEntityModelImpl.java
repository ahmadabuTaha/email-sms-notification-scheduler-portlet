/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.inspire.template.model.impl;

import com.liferay.inspire.template.model.ScheduleEntity;
import com.liferay.inspire.template.model.ScheduleEntityModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ScheduleEntity service. Represents a row in the &quot;EmailTemplates_ScheduleEntity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.inspire.template.model.ScheduleEntityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScheduleEntityImpl}.
 * </p>
 *
 * @author Ahmad Taha
 * @see ScheduleEntityImpl
 * @see com.liferay.inspire.template.model.ScheduleEntity
 * @see com.liferay.inspire.template.model.ScheduleEntityModel
 * @generated
 */
public class ScheduleEntityModelImpl extends BaseModelImpl<ScheduleEntity>
	implements ScheduleEntityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a schedule entity model instance should use the {@link com.liferay.inspire.template.model.ScheduleEntity} interface instead.
	 */
	public static final String TABLE_NAME = "EmailTemplates_ScheduleEntity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "scheduleId", Types.BIGINT },
			{ "scheduleName", Types.VARCHAR },
			{ "scheduleStore", Types.VARCHAR },
			{ "scheduleType", Types.VARCHAR },
			{ "scheduleFlagValue", Types.VARCHAR },
			{ "scheduleOp", Types.VARCHAR },
			{ "scheduleActive", Types.BOOLEAN },
			{ "templateId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EmailTemplates_ScheduleEntity (scheduleId LONG not null primary key,scheduleName VARCHAR(75) null,scheduleStore VARCHAR(75) null,scheduleType VARCHAR(75) null,scheduleFlagValue VARCHAR(75) null,scheduleOp VARCHAR(75) null,scheduleActive BOOLEAN,templateId LONG)";
	public static final String TABLE_SQL_DROP = "drop table EmailTemplates_ScheduleEntity";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.inspire.template.model.ScheduleEntity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.inspire.template.model.ScheduleEntity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.inspire.template.model.ScheduleEntity"),
			true);
	public static long TEMPLATEID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.inspire.template.model.ScheduleEntity"));

	public ScheduleEntityModelImpl() {
	}

	public long getPrimaryKey() {
		return _scheduleId;
	}

	public void setPrimaryKey(long primaryKey) {
		setScheduleId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_scheduleId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return ScheduleEntity.class;
	}

	public String getModelClassName() {
		return ScheduleEntity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("scheduleId", getScheduleId());
		attributes.put("scheduleName", getScheduleName());
		attributes.put("scheduleStore", getScheduleStore());
		attributes.put("scheduleType", getScheduleType());
		attributes.put("scheduleFlagValue", getScheduleFlagValue());
		attributes.put("scheduleOp", getScheduleOp());
		attributes.put("scheduleActive", getScheduleActive());
		attributes.put("templateId", getTemplateId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long scheduleId = (Long)attributes.get("scheduleId");

		if (scheduleId != null) {
			setScheduleId(scheduleId);
		}

		String scheduleName = (String)attributes.get("scheduleName");

		if (scheduleName != null) {
			setScheduleName(scheduleName);
		}

		String scheduleStore = (String)attributes.get("scheduleStore");

		if (scheduleStore != null) {
			setScheduleStore(scheduleStore);
		}

		String scheduleType = (String)attributes.get("scheduleType");

		if (scheduleType != null) {
			setScheduleType(scheduleType);
		}

		String scheduleFlagValue = (String)attributes.get("scheduleFlagValue");

		if (scheduleFlagValue != null) {
			setScheduleFlagValue(scheduleFlagValue);
		}

		String scheduleOp = (String)attributes.get("scheduleOp");

		if (scheduleOp != null) {
			setScheduleOp(scheduleOp);
		}

		Boolean scheduleActive = (Boolean)attributes.get("scheduleActive");

		if (scheduleActive != null) {
			setScheduleActive(scheduleActive);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}
	}

	public long getScheduleId() {
		return _scheduleId;
	}

	public void setScheduleId(long scheduleId) {
		_scheduleId = scheduleId;
	}

	public String getScheduleName() {
		if (_scheduleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _scheduleName;
		}
	}

	public void setScheduleName(String scheduleName) {
		_scheduleName = scheduleName;
	}

	public String getScheduleStore() {
		if (_scheduleStore == null) {
			return StringPool.BLANK;
		}
		else {
			return _scheduleStore;
		}
	}

	public void setScheduleStore(String scheduleStore) {
		_scheduleStore = scheduleStore;
	}

	public String getScheduleType() {
		if (_scheduleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _scheduleType;
		}
	}

	public void setScheduleType(String scheduleType) {
		_scheduleType = scheduleType;
	}

	public String getScheduleFlagValue() {
		if (_scheduleFlagValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _scheduleFlagValue;
		}
	}

	public void setScheduleFlagValue(String scheduleFlagValue) {
		_scheduleFlagValue = scheduleFlagValue;
	}

	public String getScheduleOp() {
		if (_scheduleOp == null) {
			return StringPool.BLANK;
		}
		else {
			return _scheduleOp;
		}
	}

	public void setScheduleOp(String scheduleOp) {
		_scheduleOp = scheduleOp;
	}

	public boolean getScheduleActive() {
		return _scheduleActive;
	}

	public boolean isScheduleActive() {
		return _scheduleActive;
	}

	public void setScheduleActive(boolean scheduleActive) {
		_scheduleActive = scheduleActive;
	}

	public long getTemplateId() {
		return _templateId;
	}

	public void setTemplateId(long templateId) {
		_columnBitmask |= TEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalTemplateId) {
			_setOriginalTemplateId = true;

			_originalTemplateId = _templateId;
		}

		_templateId = templateId;
	}

	public long getOriginalTemplateId() {
		return _originalTemplateId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ScheduleEntity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ScheduleEntity toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (ScheduleEntity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ScheduleEntityImpl scheduleEntityImpl = new ScheduleEntityImpl();

		scheduleEntityImpl.setScheduleId(getScheduleId());
		scheduleEntityImpl.setScheduleName(getScheduleName());
		scheduleEntityImpl.setScheduleStore(getScheduleStore());
		scheduleEntityImpl.setScheduleType(getScheduleType());
		scheduleEntityImpl.setScheduleFlagValue(getScheduleFlagValue());
		scheduleEntityImpl.setScheduleOp(getScheduleOp());
		scheduleEntityImpl.setScheduleActive(getScheduleActive());
		scheduleEntityImpl.setTemplateId(getTemplateId());

		scheduleEntityImpl.resetOriginalValues();

		return scheduleEntityImpl;
	}

	public int compareTo(ScheduleEntity scheduleEntity) {
		long primaryKey = scheduleEntity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		ScheduleEntity scheduleEntity = null;

		try {
			scheduleEntity = (ScheduleEntity)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = scheduleEntity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ScheduleEntityModelImpl scheduleEntityModelImpl = this;

		scheduleEntityModelImpl._originalTemplateId = scheduleEntityModelImpl._templateId;

		scheduleEntityModelImpl._setOriginalTemplateId = false;

		scheduleEntityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScheduleEntity> toCacheModel() {
		ScheduleEntityCacheModel scheduleEntityCacheModel = new ScheduleEntityCacheModel();

		scheduleEntityCacheModel.scheduleId = getScheduleId();

		scheduleEntityCacheModel.scheduleName = getScheduleName();

		String scheduleName = scheduleEntityCacheModel.scheduleName;

		if ((scheduleName != null) && (scheduleName.length() == 0)) {
			scheduleEntityCacheModel.scheduleName = null;
		}

		scheduleEntityCacheModel.scheduleStore = getScheduleStore();

		String scheduleStore = scheduleEntityCacheModel.scheduleStore;

		if ((scheduleStore != null) && (scheduleStore.length() == 0)) {
			scheduleEntityCacheModel.scheduleStore = null;
		}

		scheduleEntityCacheModel.scheduleType = getScheduleType();

		String scheduleType = scheduleEntityCacheModel.scheduleType;

		if ((scheduleType != null) && (scheduleType.length() == 0)) {
			scheduleEntityCacheModel.scheduleType = null;
		}

		scheduleEntityCacheModel.scheduleFlagValue = getScheduleFlagValue();

		String scheduleFlagValue = scheduleEntityCacheModel.scheduleFlagValue;

		if ((scheduleFlagValue != null) && (scheduleFlagValue.length() == 0)) {
			scheduleEntityCacheModel.scheduleFlagValue = null;
		}

		scheduleEntityCacheModel.scheduleOp = getScheduleOp();

		String scheduleOp = scheduleEntityCacheModel.scheduleOp;

		if ((scheduleOp != null) && (scheduleOp.length() == 0)) {
			scheduleEntityCacheModel.scheduleOp = null;
		}

		scheduleEntityCacheModel.scheduleActive = getScheduleActive();

		scheduleEntityCacheModel.templateId = getTemplateId();

		return scheduleEntityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{scheduleId=");
		sb.append(getScheduleId());
		sb.append(", scheduleName=");
		sb.append(getScheduleName());
		sb.append(", scheduleStore=");
		sb.append(getScheduleStore());
		sb.append(", scheduleType=");
		sb.append(getScheduleType());
		sb.append(", scheduleFlagValue=");
		sb.append(getScheduleFlagValue());
		sb.append(", scheduleOp=");
		sb.append(getScheduleOp());
		sb.append(", scheduleActive=");
		sb.append(getScheduleActive());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.inspire.template.model.ScheduleEntity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>scheduleId</column-name><column-value><![CDATA[");
		sb.append(getScheduleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleName</column-name><column-value><![CDATA[");
		sb.append(getScheduleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleStore</column-name><column-value><![CDATA[");
		sb.append(getScheduleStore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleType</column-name><column-value><![CDATA[");
		sb.append(getScheduleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleFlagValue</column-name><column-value><![CDATA[");
		sb.append(getScheduleFlagValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleOp</column-name><column-value><![CDATA[");
		sb.append(getScheduleOp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleActive</column-name><column-value><![CDATA[");
		sb.append(getScheduleActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScheduleEntity.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			ScheduleEntity.class
		};
	private long _scheduleId;
	private String _scheduleName;
	private String _scheduleStore;
	private String _scheduleType;
	private String _scheduleFlagValue;
	private String _scheduleOp;
	private boolean _scheduleActive;
	private long _templateId;
	private long _originalTemplateId;
	private boolean _setOriginalTemplateId;
	private long _columnBitmask;
	private ScheduleEntity _escapedModelProxy;
}